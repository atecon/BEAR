clear
set verbose off
set assert stop

include "./src/Datatools.inp" --force

# Test head() and tail()
nulldata 10
series y = normal()
series x = normal()
list L = y x
matrix m = seq(1,6)' ~ seq(1,6)'

head(m)      # initial 5 rows
tail(m, 2)  # only last two rows
tail(m, 7)  # all rows

head(y, 5)   # initial 5 rows
tail(y, 2)  # last two rows
tail(y, (2+$nobs))  # all rows

head(L, 2)   # initial 2 rows
tail(L, 2)  # last two rows
tail(L, (2+$nobs))  # all rows


# is_str_series()
nulldata 3
series y = normal()
y[3] = NA
series d = {NA, 1, 2}
setinfo d --discrete
series s = {1, 2, 2}'
strings S = defarray("A", "B")
stringify(s, S)

assert(is_str_series(y) == FALSE)
assert(is_str_series(d) == FALSE)
assert(is_str_series(s) == TRUE)

# nuniq()
nulldata 4
series d = {NA, 1, 2, 1}
series s = {1, 2, 2, 1}'
strings S = defarray("A", "B")
stringify(s, S)
matrix mat = {d}
list L = s d

scalar d_uniq = nuniq(d)
assert(d_uniq == 2)
scalar s_uniq = nuniq(s)
assert(s_uniq == 2)
scalar mat_uniq = nuniq(mat)
assert(mat_uniq == 2)
catch scalar L_uniq = nuniq(L)
assert($error != FALSE)

# value_counts()
nulldata 4
series d = {NA, 1, 2, 1}
series s = {1, 2, 2, 1}'
strings S = defarray("A", "B")
stringify(s, S)
matrix mat = {d}
list L = s d

catch matrix L_value_counts = value_counts(L)
assert($error > 0)
catch matrix L_value_counts = value_counts({L})
assert($error > 0)

matrix d_value_counts = value_counts(d)
assert(d_value_counts[1,1] == 1)
assert(d_value_counts[1,2] == 2)
assert(d_value_counts[2,1] == 2)
assert(d_value_counts[2,2] == 1)
strings cnames = cnameget(d_value_counts)
assert(cnames[1] == "d")
assert(cnames[2] == "count")

matrix d_value_relfreq = value_counts(d, TRUE)
assert(d_value_relfreq[1,1] == 1)
assert(d_value_relfreq[1,2] == 2/4)
assert(d_value_relfreq[2,1] == 2)
assert(d_value_relfreq[2,2] == 1/4)
strings cnames = cnameget(d_value_relfreq)
assert(cnames[1] == "d")
assert(cnames[2] == "rel.freq.")


matrix s_value_counts = value_counts(s)
assert(s_value_counts[1,2] == 2)
assert(s_value_counts[2,2] == 2)
assert(rnameget(s_value_counts)[1] == "A")
assert(rnameget(s_value_counts)[2] == "B")

matrix s_value_relfreq = value_counts(s, TRUE)
assert(s_value_relfreq[1,2] == 2/4)
assert(s_value_relfreq[2,2] == 2/4)
assert(rnameget(s_value_relfreq)[1] == "A")
assert(rnameget(s_value_relfreq)[2] == "B")

cnameset(mat, "foo")
matrix mat_value_counts = value_counts(mat)
assert(mat_value_counts[1,1] == 1)
assert(mat_value_counts[1,2] == 2)
assert(mat_value_counts[2,1] == 2)
assert(mat_value_counts[2,2] == 1)
strings cnames = cnameget(mat_value_counts)
assert(cnames[1] == "foo")
assert(cnames[2] == "count")

matrix mat_value_relfreq = value_counts(mat, TRUE)
assert(mat_value_relfreq[1,1] == 1)
assert(mat_value_relfreq[1,2] == 2/4)
assert(mat_value_relfreq[2,1] == 2)
assert(mat_value_relfreq[2,2] == 1/4)
strings cnames = cnameget(mat_value_relfreq)
assert(cnames[1] == "foo")
assert(cnames[2] == "rel.freq.")


# nmissing
nulldata 3
series y = {1, NA, 3}
series x = {NA, NA, -1}

matrix nmiss = nmissing(y)
assert(nmiss == 1)
matrix nmiss = nmissing(x)
assert(nmiss == 2)
print nmiss

list L = y x
matrix nmiss = nmissing(L)
print nmiss
assert(nmiss[1] == 1)
assert(nmiss[2] == 2)

set skip_missing off
matrix nmiss = nmissing({L})
print nmiss
assert(nmiss[1] == 1)
assert(nmiss[2] == 2)
set skip_missing on


# shape
nulldata 3
series y = {1, NA, 3}
series x = {NA, NA, -1}
matrix mat = mshape(NA, 12, 4)

matrix m = shape(y)
assert(m[1] == 3)
assert(m[2] == 1)
matrix m = shape(x)
assert(m[1] == 3)
assert(m[2] == 1)
list L = y x
matrix m = shape(L)
assert(m[1] == 3)
assert(m[2] == 2)
matrix m = shape(mat)
assert(m[1] == rows(mat))
assert(m[2] == cols(mat))


# Function showing dtypes of series
nulldata 4
series y = normal()
series d = {NA, 1, 2, 1}
setinfo d --discrete
series s = {1, 2, 2, 1}'
strings S = defarray("A", "B")
stringify(s, S)
list L = y d s

dtypes(L)
dtypes(y)
dtypes(d)
dtypes(s)


# Aggregation for multiple methods, like pandas' agg()
nulldata 4
series y = normal()
series x = normal()
series category = {1, 2, 1, 2}
series s = {1, 2, 2, 1}'
strings S = defarray("A", "B")
stringify(s, S)
list L = y x

strings methods = defarray("mean", "min") #, "max")

matrix result = agg(L, category, methods)
print result

matrix result = agg(y, category, methods)
print result

# TODO: 'byvar' should take into account the string-values of s
matrix result = agg(L, s, methods)
print result

open housing.gdt --quiet
list Groupby = airco prefarea
#eval aggregate(price, Groupby, "mean")

strings methods = defarray("mean", "min", "max")
eval agg(price, Groupby, methods)

# last scenario: both 'target' and 'groupby' are lists
list Targets = price lotsize
#eval aggregate(Targets, Groupby, "mean")
matrix agg = agg(Targets, Groupby, methods)
set datacols 12
print agg

