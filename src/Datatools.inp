function void head (const numeric target,
                    const int nrows[1::5])
    /* Prints the initial rows of some series, list of matrix. */
    head_tail(target, nrows)
end function


function void tail (const numeric target,
                    const int nrows[1::5])
    /* Prints the last rows of some series, list of matrix. */
    head_tail(target, -nrows)
end function


function void head_tail (const numeric target, int nrows[::5])
    /* Return the first nrows rows of some series, list or matrix based on position.
    For negative values of nrows, this function returns the last |nrows| rows.
    If |nrows| is larger than the number of rows, this function returns all rows.
    If nrows  is zero, the function errors. */

    errorif(nrows == 0, "'nrows' cannot be zero")

    if typename(target) == "series" || typename(target) == "list"
        scalar nrows = abs(nrows) > $nobs ? sgn(nrows)*$nobs : nrows

        if nrows > 0
            print target --byobs --range=:nrows
        else
            print target --byobs --range=nrows:
        endif

    elif typename(target) == "matrix"
        scalar nrows = abs(nrows) > rows(target) ? sgn(nrows)*rows(target) : nrows

        if nrows > 0
            print target[1:nrows,]
        else
            scalar init = rows(target) + nrows + 1
            print target[init:,]
        endif

    endif
end function


function scalar is_str_series (const series y)
    /*
    Check if a given series is string-valued.

    Parameters:
    y (series): The series to check.

    Returns:
    scalar: Returns TRUE if the series is string-valued, otherwise returns FALSE.
    */

    if getinfo(y).has_string_table == TRUE
        return TRUE
    else
        return FALSE
    endif
end function

function scalar is_continuous_series (const series y)
    /*
    Check if a given series consists of numeric and non-discrete values.

    Parameters:
    y (series): The series to check.

    Returns:
    scalar: Returns TRUE if the series is numeric and non-discrete, otherwise returns FALSE.
    */

    if getinfo(y).has_string_table == TRUE || getinfo(y).discrete == TRUE
        return FALSE
    else
        return TRUE
    endif
end function

function scalar is_discrete_series (const series y)
    /*
    Check if a given series is numeric but consists only of discrete values.

    Parameters:
    y (series): The series to check.

    Returns:
    scalar: Returns TRUE if the series is numeric and non-discrete, otherwise returns FALSE.
    */

    if getinfo(y).has_string_table == FALSE && getinfo(y).discrete == TRUE
        return TRUE
    else
        return FALSE
    endif
end function


function matrix nuniq (const series target)
    /*
    Count the number of unique values in a given series. Missing values are
    ignored and not counted.

    Parameters:
    y (series): The series to count unique values in.

    Returns:
    matrix: The number of unique values in the series. If 'target' is a string
    series, the distinct string values are additionally printed as row labels.
    */

    matrix vals = uniq(target)
    matrix nvals = vals ~ NA

    loop i=1..nelem(vals)
        nvals[i,2] = sum(target .= vals[i])
    endloop

    cnameset(nvals, "value n")
    if is_str_series(target) == TRUE
        rnameset(nvals, strvals(target))
    endif

    return nvals
end function


function matrix nmissing (args)
    /* code description
    return: type, description */

    code

    return variable
end function
